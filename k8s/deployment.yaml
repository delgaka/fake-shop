# deployment do postgres
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgre
spec:
  selector:
    matchLabels:
      app: postgre
  template:
    metadata:
      labels:
        app: postgre
    spec:
      containers:
        - name: postgre
          image: postgres:13.16
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: fakeshop
            - name: POSTGRES_PASSWORD
              value: Pg1234
            - name: POSTGRES_DB
              value: fakeshop
---
apiVersion: v1
kind: Service
metadata:
  name: postgre
spec:
  selector:
    app: postgre
  ports:
    - port: 5432
      targetPort: 5432
---
# deployment da aplicacao web
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fakeshop
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fakeshop
  template:
    metadata:
      labels:
        app: fakeshop
    spec:
      # imagePullSecrets:
      #   - name: my-docker-secret # Referência ao Secret criado
      containers:
        - name: fakeshop
          image: delgaka/fake-shop:v1
          imagePullPolicy: Always # Garante que o Kubernetes sempre buscará a imagem do repositório
          ports:
            - containerPort: 5000
          env:
            - name: DB_HOST
              value: postgre
            - name: DB_USER
              value: fakeshop
            - name: DB_PASSWORD
              value: Pg1234
            - name: DB_NAME
              value: fakeshop
            - name: DB_PORT
              value: "5432"
            - name: FLASK_APP
              value: index.py
---
# versão para k3d bind na 30000 - criando o cluster -p 8080:30000@loadbalancer
# apiVersion: v1
# kind: Service
# metadata:
#   name: fakeshop
# spec:
#   selector:
#     app: fakeshop
#   ports:
#     - port: 80
#       targetPort: 5000
#       nodePort: 30000
#   type: NodePort
# ---
apiVersion: v1
kind: Service
metadata:
  name: fakeshop
spec:
  selector:
    app: fakeshop
  ports:
    - port: 80
      targetPort: 5000
  type: LoadBalancer
